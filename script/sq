#!/usr/bin/env perl

#
# @author Masahiro Kasahara (masahiro@kasahara.ws)
#

use strict;
use DBI;
# need DBD::CSV
use Getopt::Long;
use Pod::Usage;
use Data::Dump qw(dump);
use Text::CSV;

my $flag_help       = 0;
my $flag_man        = 0;
my $flag_csv        = 0;
my $flag_noheader   = 0;
my $flag_html       = 0;
my $flag_colname    = 0;
my $flag_colname2   = 0;
my $flag_input_is_tsv = 0;
my $debug           = 0;
my $param_directory = $ENV{'PWD'};

GetOptions( 'man'             => \$flag_man,
            'help'            => \$flag_help,
            'noheader'        => \$flag_noheader,
            'csv'             => \$flag_csv,
            'html'            => \$flag_html,
            'debug'           => \$debug,
	    'col'             => \$flag_colname,
	    'tcol'            => \$flag_colname2,
	    'tsvin'           => \$flag_input_is_tsv,
            'dir=s'           => \$param_directory,
	      ) or pod2usage(2);

my $commandString = shift;
print STDERR "CommandString:$commandString\n" if($debug);

$flag_help = 1 unless(defined $commandString);
pod2usage(1) if $flag_help;
pod2usage(-verbose => 2) if $flag_man;

my $beginning_of_text = "";
my $end_of_text       = "";
my $beginning_of_line = "";
my $end_of_line       = "\n";
my $separator         = "\t";
$separator = "," if($flag_csv);
if($flag_html) {
    $beginning_of_text = "<TABLE>\n";
    $end_of_text       = "</TABLE>\n";
    $beginning_of_line = "<TR><TD>";
    $separator         = "</TD><TD>";
    $end_of_line       = "</TD></TR>\n";
}
my $csv = Text::CSV->new();

if("exec" =~ /^$commandString/i) {
    if($flag_input_is_tsv) {
	print STDERR "ERROR: --tsvin option cannot be used with exec command\n";
	exit 1;
    }
    my $sqlString = shift;
    unless(defined $sqlString) {
	print STDERR "sql exec <sql query>\n";
	exit 1;
    }
    my $dbh = DBI->connect("DBI:CSV:f_dir=$param_directory;csv_eol=\n;"
			   . "csv_sep_char=,;csv_quote_char=;"
			   . "csv_escape_char=");
    my $sth = $dbh->prepare($sqlString);
    $sth->execute();
    my $is_first_in_the_loop = 1;
    print $beginning_of_text;
    while (my $row = $sth->fetchrow_arrayref) {
	# dump($row);
	if($is_first_in_the_loop) {
	    $is_first_in_the_loop = 0;
	    unless($flag_noheader) {
	        my @rowNames = @{$sth->{NAME}};
		if($flag_csv) {
		    $csv->combine(@rowNames);
		    print $beginning_of_line, $csv->string(), $end_of_line;
		} else {
		    print $beginning_of_line, join($separator, @rowNames), $end_of_line;
		}
	    }
	}
	if($flag_csv) {
	    $csv->combine(@$row);
	    print $beginning_of_line, $csv->string(), $end_of_line;
	} else {
	    print $beginning_of_line, join($separator, @$row), $end_of_line;
	}
    }
    print $end_of_text;

    $sth->finish();
} elsif("select" =~ /^$commandString/i) {
    my $equal    = shift; $equal =~ /^([^=]*)=(.*)$/;
    my $keyname  = $1;
    my $value    = $2;
    my $filename = shift;
    unless(defined $equal && defined $filename && defined $keyname && defined $value) {
	print STDERR "sql select <COLUMN=KEY> <filename>\n";
	print STDERR "ex) sql select \"name=bob\" employee.csv\n";
	exit 1;
    }
    open my $fh, "<", $filename or die "Cannot open '$filename'";
    my @attributes;
    unless($flag_colname) {
	my $header = <$fh>; chomp $header; chop $header if(/\r$/);
	if($flag_input_is_tsv) {
	    @attributes = split(/\t/, $header);
	} else {
	    my $status = $csv->parse($header);
	    @attributes = $csv->fields();
	}
    }
    my $is_first_in_the_loop = 1;
    my $key_column = undef;
    print $beginning_of_text;
    while(<$fh>) {
	chomp; chop if(/\r$/);
	my @fields;
	if($flag_input_is_tsv) {
	    @fields = split(/\t/);
	} else {
	    my $line = $csv->parse($_);
	    @fields = $csv->fields();
	}
	if($is_first_in_the_loop) {
	    $is_first_in_the_loop = 0;
	    if($flag_colname) {
		for(my $i = 0; $i < @fields; $i++) {
		    $attributes[$i] = "col" . ($i + 1);
		}
	    }
	    for($key_column = 0; $key_column < @attributes; $key_column++) {
		last if($attributes[$key_column] eq $keyname);
	    }
	    unless($key_column < @attributes) {
		print STDERR "Could not find attribute '$keyname'\n";
		print STDERR "The attributes are, ", join(', ', @attributes), ".\n";
		if(@attributes == 1) {
		    print STDERR "The number of the attributes is 1, so probably the input might be in a different format.\nYou may try --tsvin option if your file is in TSV format.";
		}
		exit 1;
	    }
	}
	push(@fields, "") while(@fields < scalar(@attributes));
	pop (@fields)     while(@fields > scalar(@attributes));
	if($fields[$key_column] =~ /$value/) {
	    if($flag_csv) {
		my $status = $csv->combine(@fields);
		print $beginning_of_line, $csv->string(), $end_of_line;
	    } else {
		print $beginning_of_line, join($separator, @fields), $end_of_line;
	    }
	}
    }
    close $fh;
    print $end_of_text;
} elsif("leftjoin" =~ /^$commandString/i) {
    my $equal     = shift; $equal =~ /^([^=]*)=(.*)$/;
    my $keyname1  = $1;
    my $keyname2  = $2; if($keyname2 eq '') { $keyname2 = $keyname1; }
    my $filename1 = shift;
    my $filename2 = shift;
    unless(defined $keyname1 && defined $keyname2 && defined $filename1 && defined $filename2) {
	print STDERR "sql leftjoin <LEFTCOLUMN=RIGHTCOLUMN> <left table> <right table>\n";
	print STDERR "ex) sql leftjoin name=name employee.csv salary.csv\n";
	exit 1;
    }
    my $key_to_table2lines = {};
    my @f2_attributes;
    my $f2_key_column = undef;
    {   # load table 2 on memory
	open my $fh, "<", $filename2 or die "Cannot open '$filename2'";
	unless($flag_colname2) {
	    my $header = <$fh>; chomp $header; chop $header if(/\r$/);
	    if($flag_input_is_tsv) {
		@f2_attributes = split(/\t/, $header);
	    } else {
		my $status = $csv->parse($header);
		@f2_attributes = $csv->fields();
	    }
	}
	my $is_first_in_the_loop = 1;
	while(<$fh>) {
	    chomp; chop if(/\r$/);
	    my @fields;
	    if($flag_input_is_tsv) {
		@fields = split(/\t/);
	    } else {
		my $line   = $csv->parse($_);
		@fields = $csv->fields();
	    }
	    if($is_first_in_the_loop) {
		$is_first_in_the_loop = 0;
		if($flag_colname2) {
		    for(my $i = 0; $i < @fields; $i++) {
			$f2_attributes[$i] = "col" . ($i + 1);
		    }
		}
		for($f2_key_column = 0; $f2_key_column < @f2_attributes; $f2_key_column++) {
		    last if($f2_attributes[$f2_key_column] eq $keyname2);
		}
		unless($f2_key_column < @f2_attributes) {
		    print STDERR "Could not find attribute '$keyname2'\n";
		    print STDERR "The attributes in table2 are, ", join(', ', @f2_attributes), ".\n";
		    exit 1;
		}
	    }
	    push(@fields, "") while(@fields < scalar(@f2_attributes));
	    pop (@fields)     while(@fields > scalar(@f2_attributes));
	    push(@{$key_to_table2lines->{$fields[$f2_key_column]}}, \@fields);
	}
	close $fh;
    }
    {   # load table 1 and process
	my @f1_attributes;
	my $f1_key_column;
	open my $fh, "<", $filename1 or die "Cannot open '$filename1'";
	unless($flag_colname) {
	    my $header = <$fh>; chomp $header; chop $header if(/\r$/);
	    if($flag_input_is_tsv) {
		@f1_attributes = split(/\t/, $header);
	    } else {
		my $status = $csv->parse($header);
		@f1_attributes = $csv->fields();
	    }
	}
	my $is_first_in_the_loop = 1;
	print $beginning_of_text;
	while(<$fh>) {
	    chomp; chop if(/\r$/);
	    my @fields;
	    if($flag_input_is_tsv) {
		@fields = split(/\t/);
	    } else {
		my $line = $csv->parse($_);
		@fields = $csv->fields();
	    }
	    if($is_first_in_the_loop) {
		$is_first_in_the_loop = 0;
		if($flag_colname) {
		    for(my $i = 0; $i < @fields; $i++) {
			$f1_attributes[$i] = "col" . ($i + 1);
		    }
		}
		for($f1_key_column = 0; $f1_key_column < @f1_attributes; $f1_key_column++) {
		    last if($f1_attributes[$f1_key_column] eq $keyname1);
		}
		unless($f1_key_column < @f1_attributes) {
		    print STDERR "Could not find attribute '$keyname1'\n";
		    print STDERR "The attributes in table1 are, ", join(', ', @f1_attributes), ".\n";
		    exit 1;
		}
		unless($flag_noheader) {
		    my @header_csv = @f1_attributes;
		    for(my $i = 0; $i < @f2_attributes; $i++) {
			push(@header_csv, $f2_attributes[$i]) unless($i == $f2_key_column);
		    }
		    if($flag_csv) {
			$csv->combine(@header_csv);
			print $beginning_of_line, $csv->string(), $end_of_line;
		    } else {
			print $beginning_of_line, join($separator, @header_csv), $end_of_line;
		    }
		}
	    }
	    push(@fields, "") while(@fields < scalar(@f1_attributes));
	    pop (@fields)     while(@fields > scalar(@f1_attributes));
	    my $f2_lines = $key_to_table2lines->{$fields[$f1_key_column]};
	    unless(defined $f2_lines) {
		for(my $i = 0; $i < @f2_attributes - 1; $i++) { push(@fields, "") } # -1 for key_column
		{
		    if($flag_csv) {
			$csv->combine(@fields);
			print $beginning_of_line, $csv->string(), $end_of_line;
		    } else {
			print $beginning_of_line, join($separator, @fields), $end_of_line;
		    }
		}
	    } else {
		for my $line (@$f2_lines) {
		    my @outputcolumns = @fields;
		    for(my $i = 0; $i < @f2_attributes; $i++) {
			push(@outputcolumns, $line->[$i]) unless($i == $f2_key_column);
		    }
		    if($flag_csv) {
			$csv->combine(@outputcolumns);
			print $beginning_of_line, $csv->string(), $end_of_line;
		    } else {
			print $beginning_of_line, join($separator, @outputcolumns), $end_of_line;
		    }
		}
	    }
	}
	close $fh;
	print $end_of_text;
    }
} elsif ($commandString =~ /^field/i) {
    my $filename = shift;
    my @attributes;
    open my $fh, "<", $filename or die "Cannot open '$filename'";
    my $header = <$fh>; chomp $header; chop $header if(/\r$/);
    if($flag_input_is_tsv) {
	@attributes = split(/\t/, $header);
    } else {
        my $status = $csv->parse($header);
	@attributes = $csv->fields();
    } 
    for(@attributes) { print "$_\n"; }
} else {
    print STDERR "Unknown command '$commandString'\n";
}

__END__

=head1 NAME

sql - Do SQL Query over CSV file.

=head1 SYNOPSIS

sql [options...] <query type> <csv file> [arguments...]

Options:
   -help            show brief help message
   -man             show full documentation

=head1 OPTIONS

=over 8

=item B<--help>

Show a brief help message.

=item B<--man>

Show a man page.

=item B<--csv>

Output in CSV format.

=item B<--html>

Output in HTML format.

=item B<--noheader>

Do not output the header.

=item B<--col>

Usually, sql assumes that the first line in the input file indicates column names.
When the first line is a data, not a header, then use --col to indicate column names
are named 'col1', 'col2', ...., 'coln', where n is the number of columns in the first
line.

=item B<--tcol>

This option is similar to --col, but differs in that it is valid only when join query,
and it is for the second table. (eg. imagine that a join operation between the first
table with header and the second table without header, where --col option is not given,
whereas --tcol must be given.)

=item B<--tsvin>

This option specifies that the input file is a TSV file instead of a CSV file.

=cut

